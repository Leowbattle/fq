// Code generated by goyacc -o parse.go -v  parse.go.y. DO NOT EDIT.

//line parse.go.y:2

// https://github.com/kaitai-io/kaitai_struct_compiler/blob/master/shared/src/main/scala/io/kaitai/struct/exprlang

package ksexpr

import __yyfmt__ "fmt"

//line parse.go.y:5

//line parse.go.y:9
type yySymType struct {
	yys   int
	token Token
	node  Node
	nodes []Node
	ns    []Token
}

const tokNumber = 57346
const tokIdent = 57347
const tokString = 57348
const tokLessEq = 57349
const tokGreaterEq = 57350
const tokEqEq = 57351
const tokNotEq = 57352
const tokBSL = 57353
const tokBSR = 57354
const tokBAnd = 57355
const tokBOr = 57356
const tokBXor = 57357
const tokNot = 57358
const tokAnd = 57359
const tokOr = 57360
const tokTrue = 57361
const tokFalse = 57362
const tokColonColon = 57363
const tokUnterminatedString = 57364
const tokError = 57365

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tokNumber",
	"tokIdent",
	"tokString",
	"tokLessEq",
	"tokGreaterEq",
	"tokEqEq",
	"tokNotEq",
	"tokBSL",
	"tokBSR",
	"tokBAnd",
	"tokBOr",
	"tokBXor",
	"tokNot",
	"tokAnd",
	"tokOr",
	"tokTrue",
	"tokFalse",
	"tokColonColon",
	"tokUnterminatedString",
	"tokError",
	"'~'",
	"'|'",
	"'^'",
	"'?'",
	"':'",
	"'<'",
	"'>'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.go.y:126

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 11,
	21, 41,
	-2, 37,
	-1, 52,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 7,
	-1, 53,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 8,
	-1, 54,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 9,
	-1, 55,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 10,
	-1, 56,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 11,
	-1, 57,
	7, 0,
	8, 0,
	9, 0,
	10, 0,
	29, 0,
	30, 0,
	-2, 12,
	-1, 70,
	21, 42,
	-2, 38,
}

const yyPrivate = 57344

const yyLast = 289

var yyAct = [...]int{
	2, 71, 72, 74, 35, 36, 37, 43, 80, 40,
	42, 81, 41, 19, 18, 20, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 22, 24, 25, 26,
	27, 28, 68, 70, 39, 67, 32, 33, 29, 16,
	17, 19, 18, 20, 30, 31, 34, 1, 21, 23,
	29, 16, 17, 19, 18, 20, 12, 45, 14, 78,
	75, 38, 6, 76, 77, 79, 22, 24, 25, 26,
	27, 28, 82, 66, 0, 0, 32, 33, 16, 17,
	19, 18, 20, 0, 30, 31, 34, 0, 21, 23,
	29, 16, 17, 19, 18, 20, 0, 0, 69, 22,
	24, 25, 26, 27, 28, 0, 0, 0, 0, 32,
	33, 0, 0, 0, 0, 0, 0, 30, 31, 34,
	73, 21, 23, 29, 16, 17, 19, 18, 20, 22,
	24, 25, 26, 27, 28, 0, 0, 0, 0, 32,
	33, 0, 0, 0, 0, 0, 0, 30, 31, 34,
	0, 21, 23, 29, 16, 17, 19, 18, 20, 22,
	24, 25, 26, 27, 28, 0, 0, 0, 0, 32,
	33, 0, 0, 0, 0, 0, 0, 0, 31, 34,
	0, 21, 23, 29, 16, 17, 19, 18, 20, 22,
	24, 25, 26, 27, 28, 0, 0, 0, 0, 32,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 21, 23, 29, 16, 17, 19, 18, 20, 10,
	11, 13, 0, 0, 0, 10, 11, 13, 0, 0,
	0, 5, 0, 0, 7, 8, 0, 5, 0, 3,
	7, 8, 0, 0, 0, 3, 0, 0, 4, 22,
	24, 25, 26, 9, 4, 15, 44, 0, 0, 9,
	0, 15, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 21, 23, 29, 16, 17, 19, 18, 20,
}

var yyPact = [...]int{
	231, -1000, 132, 231, 231, 231, -28, -1000, -1000, 231,
	-1000, -1000, -14, -1000, -1000, 225, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 132, -21, 132, -28, -1000,
	40, 231, 69, 38, -1000, -40, 132, -21, -21, -1000,
	-1000, -1000, 17, 17, 17, 17, 17, 17, 252, 252,
	56, 162, 192, 252, 252, 102, -1000, -35, 29, -1000,
	-1000, -1000, 231, 231, 231, -1000, 132, 192, -31, 132,
	-1000, 231, 132,
}

var yyPgo = [...]int{
	0, 0, 72, 44, 71, 69, 68, 67, 66, 57,
}

var yyR1 = [...]int{
	0, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 3, 3,
	3, 5, 5, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 6, 6, 7, 7,
}

var yyR2 = [...]int{
	0, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 5, 1, 2, 1, 2, 5, 2,
	3, 1, 3, 1, 1, 3, 1, 1, 3, 1,
	1, 1, 3, 2, 3, 1, 3,
}

var yyChk = [...]int{
	-1000, -9, -1, 24, 33, 16, -2, 19, 20, 38,
	4, 5, -8, 6, -6, 40, 32, 33, 35, 34,
	36, 29, 7, 30, 8, 9, 10, 11, 12, 31,
	25, 26, 17, 18, 27, -1, -1, -1, -4, -3,
	37, 40, -1, 21, 41, -7, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -3, 5, -1, 39,
	5, 41, 42, 28, 38, 41, -1, -1, -5, -1,
	39, 42, -1,
}

var yyDef = [...]int{
	0, -2, 1, 0, 0, 0, 24, 33, 34, 0,
	36, -2, 0, 39, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 20, 21, 22, 25, 26,
	0, 0, 0, 0, 43, 0, 45, 2, 3, 4,
	5, 6, -2, -2, -2, -2, -2, -2, 13, 14,
	15, 16, 17, 18, 19, 0, 27, 29, 0, 35,
	-2, 44, 0, 0, 0, 30, 46, 23, 0, 31,
	28, 0, 32,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 36, 31, 3,
	38, 39, 34, 32, 42, 33, 37, 35, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 28, 3,
	29, 3, 30, 27, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 40, 3, 41, 26, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 25, 3, 24,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:61
		{
			yylex.(*yyLex).result = yyDollar[1].node
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:64
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpAdd, RHS: yyDollar[3].node}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:65
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpSub, RHS: yyDollar[3].node}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:66
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpDiv, RHS: yyDollar[3].node}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:67
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpMul, RHS: yyDollar[3].node}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:68
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpMod, RHS: yyDollar[3].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:69
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpLT, RHS: yyDollar[3].node}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:70
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpLTEQ, RHS: yyDollar[3].node}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:71
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpGT, RHS: yyDollar[3].node}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:72
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpGTEQ, RHS: yyDollar[3].node}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:73
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpEQ, RHS: yyDollar[3].node}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:74
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpNotEQ, RHS: yyDollar[3].node}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:75
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpBSL, RHS: yyDollar[3].node}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:76
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpBSR, RHS: yyDollar[3].node}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:77
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpBAnd, RHS: yyDollar[3].node}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:78
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpBOr, RHS: yyDollar[3].node}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:79
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpBXor, RHS: yyDollar[3].node}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:80
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpAnd, RHS: yyDollar[3].node}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:81
		{
			yyVAL.node = InfixOpNode{LHS: yyDollar[1].node, Op: InfixOpOr, RHS: yyDollar[3].node}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:82
		{
			yyVAL.node = PrefixOpNode{Expr: yyDollar[2].node, Op: PrefixOpInv}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:83
		{
			yyVAL.node = PrefixOpNode{Expr: yyDollar[2].node, Op: PrefixOpNeg}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:84
		{
			yyVAL.node = PrefixOpNode{Expr: yyDollar[2].node, Op: PrefixOpNot}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.go.y:85
		{
			yyVAL.node = TernaryNode{Expr: yyDollar[1].node, TrueExpr: yyDollar[3].node, FalseExpr: yyDollar[5].node}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:86
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:87
		{
			t, _ := yyDollar[1].node.(TermNode)
			t.Trailers = yyDollar[2].nodes
			yyVAL.node = t
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:94
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:95
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.go.y:97
		{
			yyVAL.node = TrailerCallNode{Name: yyDollar[2].token, Args: yyDollar[4].nodes}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:98
		{
			yyVAL.node = TrailerCallNode{Name: yyDollar[2].token}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:99
		{
			yyVAL.node = TrailerIndexNode{Expr: yyDollar[2].node}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:102
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:103
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:106
		{
			yyVAL.node = TermNode{T: ConstNode(yyDollar[1].token)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:107
		{
			yyVAL.node = TermNode{T: ConstNode(yyDollar[1].token)}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:108
		{
			yyVAL.node = TermNode{T: yyDollar[2].node}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:109
		{
			yyVAL.node = TermNode{T: ConstNode(yyDollar[1].token)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:110
		{
			yyVAL.node = TermNode{T: IdentNode{Name: yyDollar[1].token}}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:111
		{
			yyVAL.node = TermNode{T: IdentNode{NS: yyDollar[1].ns, Name: yyDollar[3].token}}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:112
		{
			yyVAL.node = TermNode{T: ConstNode(yyDollar[1].token)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:113
		{
			yyVAL.node = TermNode{T: yyDollar[1].node}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:116
		{
			yyVAL.ns = []Token{yyDollar[1].token}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:117
		{
			yyVAL.ns = append(yyDollar[1].ns, yyDollar[3].token)
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.go.y:120
		{
			yyVAL.node = ArrayNode{}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:121
		{
			yyVAL.node = ArrayNode(yyDollar[2].nodes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.go.y:123
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.go.y:124
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
