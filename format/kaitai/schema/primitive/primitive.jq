# https://github.com/kaitai-io/kaitai_struct_compiler/blob/master/shared/src/main/scala/io/kaitai/struct/datatype/DataType.scala
# no type is bytes
# b1[|le|be] is bool
# b[2-64][|le|be] bits
# u[1-8][|le|be]
# s[1-8][|le|be]
# f4,8[|le|be]

def entry:
  "\"\(.name)\(.size | if . == 0 then "" end)\(.endian_name)\": {\(.encoding), \(.bit_size), \(.bit_align), \(.endian_enum)},";

def entries:
  ( { name: "bytes", size: 0, bit_size: 0, bit_align: 8, encoding: "Bytes", endian_name: "", endian_enum: "CurrentEndian"}
  , { name: "str", size: 0, bit_size: 0, bit_align: 8, encoding: "Str", endian_name: "", endian_enum: "CurrentEndian"}
  , { name: "strz", size: 0, bit_size: 0, bit_align: 8, encoding: "StrTerminated", endian_name: "", endian_enum: "CurrentEndian"}

  , ( { name: "b", bit_align: 0, encoding: "Bool"}
    | . +
      ( {endian_name: "",   endian_enum:"CurrentEndian"}
      , {endian_name: "be", endian_enum:"BE"}
      , {endian_name: "le", endian_enum:"LE"}
      )
    | 1 as $size
    | . += {size: $size, bit_size: $size}
    )

  , ( { name: "b", bit_align: 0, encoding: "Bits"}
    | . +
      ( {endian_name: "",   endian_enum:"CurrentEndian"}
      , {endian_name: "be", endian_enum:"BE"}
      , {endian_name: "le", endian_enum:"LE"}
      )
    | range(2; 64+1) as $size
    | . += {size: $size, bit_size: $size}
    )

  , ( . +
      ( {name: "u", encoding: "Unsigned", bit_align: 8}
      , {name: "s", encoding: "Signed", bit_align: 8}
      )
    | ( {endian_name: "",   endian_enum:"CurrentEndian", bit_align: 8}
      ) as $e
    | . += $e
    | (1,2,4,8) as $size
    | . += {size: $size, bit_size: ($size*8)}
    )

  , ( . +
      ( {name: "u", encoding: "Unsigned", bit_align: 8}
      , {name: "s", encoding: "Signed", bit_align: 8}
      )
    | . +
      ( {endian_name: "be", endian_enum:"BE", bit_align: 8}
      , {endian_name: "le", endian_enum:"LE", bit_align: 8}
      )
    | (2,4,8) as $size
    | . += {size: $size, bit_size: ($size*8)}
    )

  , ( { name: "f", encoding: "Float"}
    | . +
      ( {endian_name: "",   endian_enum:"CurrentEndian", bit_align: 8}
      , {endian_name: "be", endian_enum:"BE", bit_align: 8}
      , {endian_name: "le", endian_enum:"LE", bit_align: 8}
      )
    | (4,8) as $size
    | . += {size: $size, bit_size: ($size*8)}
    )
  ) | entry;

( "// Generated by primitive.jq"
, "package primitive"
, "var Types = map[string]*Type{"
, entries
, "}"
)
